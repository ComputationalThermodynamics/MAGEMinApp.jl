using Test
using ProgressMeter
using MAGEMin_C
using MAGEMinApp
using PlotlyJS

pkg_dir = Base.pkgdir(MAGEMinApp)

include(joinpath(pkg_dir,"src","AMR/AMR_utils.jl"))
include(joinpath(pkg_dir,"src","Progress.jl"))
include(joinpath(pkg_dir,"src","AMR/MAGEMin_utils.jl"))
include(joinpath(pkg_dir,"src","PhaseDiagram_functions.jl"))
global CompProgress = ComputationalProgress()

level           = 2
data            = init_AMR([600.0,1400.0], [2.0,20.0], level)

MAGEMin_data    = Initialize_MAGEMin(   "ig";
                                        verbose     = false    );

# bulk-rock composition is KLB1
bulk            = [0.38451319035870185, 0.017740308257833806, 0.028208688355924924, 0.5050993397328966, 0.0587947378409965, 9.988912307338855e-5, 0.0024972280768347137, 0.0009988912307338856, 0.0009589355815045301, 0.0010887914414999351, 0.0]
oxides          = ["SiO2", "Al2O3", "CaO", "MgO", "FeO", "K2O", "Na2O", "TiO2", "O", "Cr2O3", "H2O"]

println("  Test P-T diagram computation")
global Out_XY =  Vector{MAGEMin_C.gmin_struct{Float64, Int64}}(undef,0)
Out_XY, Hash_XY, n_phase_XY  = refine_MAGEMin(  data, 
                                                MAGEMin_data,
                                                "pt",
                                                0.0,
                                                nothing,
                                                0.0,
                                                0.0,
                                                oxides,
                                                bulk,
                                                bulk,
                                                "NONE",
                                                0.0,
                                                0.0,
                                                0,
                                                false,
                                                "ph",
                                                nothing,
                                                nothing    )
@test length(Out_XY) == 25

results = [ -787.5021281229567; -780.3561723080602; -773.3527763396436; -766.4099019277187; -759.5152725789162; -807.3352677633849; -800.1192103984516; -793.0479904520582; -786.0403142969375; -779.091199095056; -829.5233690370851; -822.2589936166174; -815.1059020451603; -808.0275997269894; -801.016558171696; -853.7724167758879; -846.4400658082319; -839.2155372393563; -832.0763170590177; -824.9827244715955; -880.4886361964809; -872.8679746851093; -865.3993513711622; -858.0353846182636; -850.7857604621469]
for i = 1:25
    @test Out_XY[i].G_system ≈ results[i] rtol=1e-4
end

println("  Test refinement")
data    = select_cells_to_split_and_keep(data)
data    = perform_AMR(data)

Out_XY, Hash_XY, n_phase_XY = refine_MAGEMin(   data,
                                                MAGEMin_data,
                                                "pt",
                                                0.0,
                                                nothing,
                                                0.0,
                                                0.0,
                                                oxides,
                                                bulk,
                                                bulk,
                                                "NONE",
                                                0.0,
                                                0.0,
                                                0,
                                                false,
                                                "ph",
                                                nothing,
                                                nothing ) # recompute points that have not been computed before

@test length(Out_XY) == 81

results = [ -787.5021281229567; -780.3561723080602; -773.3527763396436; -766.4099019277187; -759.5152725789162; -807.3352677633849; -800.1192103984516; -793.0479904520582; -786.0403142969375; -779.091199095056; -829.5233690370851; -822.2589936166174; -815.1059020451603; -808.0275997269894; -801.016558171696; -853.7724167758879; -846.4400658082319; -839.2155372393563; -832.0763170590177; -824.9827244715955; -880.4886361964809; -872.8679746851093; -865.3993513711622; -858.0353846182636; -850.7857604621469; -793.4958065826659; -783.9076280418622; -789.9138898520338; -803.7185490472417; -797.1013050486752; -786.3927849248868; -776.8509868834662; -782.8815617981878; -796.5726664901508; -779.3822174572567; -769.8698899244762; -775.9073374914761; -789.5315122653172; -772.4427599870476; -762.959034440156; -768.9859759713694; -782.5615282012019; -814.5280100028003; -810.9161426744446; -825.882868479821; -818.1561787795456; -807.3416814115258; -803.8033199611269; -818.6602259854011; -800.2723703892802; -796.760812461995; -811.5611058126912; -793.2667561302652; -789.7820347979989; -804.5167858582549; -837.7470664432146; -834.1104591482115; -850.0920231350568; -841.4003188178998; -830.4948718940514; -826.9202268900124; -842.8105347238555; -823.3612310813717; -819.8099313165925; -835.6419613962723; -816.2770877558328; -812.7597666675025; -828.5195066642439; -863.0817104255258; -859.3517090161208; -876.661859197177; -866.8579447595877; -855.658132131277; -852.0055964461089; -869.1180019347844; -848.3868451870767; -844.7964266684249; -861.7062982994196; -841.2239388694064; -837.6620712684154; -854.3929125432605]
for i = 1:81
    @test Out_XY[i].G_system ≈ results[i] rtol=1e-4
end

for i = 1:Threads.maxthreadid()
    finalize_MAGEMin(MAGEMin_data.gv[i],MAGEMin_data.DB[i],MAGEMin_data.z_b[i])
end

